# ---------------------------
# 一、创建元组
# ---------------------------
# 空元组
empty_tuple = ()  
print("空元组:", empty_tuple)  # 输出: ()

# 基础数据类型元组（括号可选，推荐保留）
basic_tuple = (1, "apple", 3.14, True)  
print("基础元组:", basic_tuple)  # 输出: (1, 'apple', 3.14, True)

# 单元素元组（必须加逗号，否则视为普通变量）
single_tuple = (5,)  
print("单元素元组:", single_tuple)  # 输出: (5,)

# 省略括号的元组（隐式创建）
implicit_tuple = 1, 2, "three"  
print("隐式元组:", implicit_tuple)  # 输出: (1, 2, 'three')

# 嵌套元组（包含元组、列表、字典）
nested_tuple = (
    1,  
    (2, 3, [4, 5]),  # 嵌套元组和列表（列表是可变元素）
    {"key": "value"},
    ["a", "b"]
)
print("嵌套元组:", nested_tuple)  
# 输出: (1, (2, 3, [4, 5]), {'key': 'value'}, ['a', 'b'])


# ---------------------------
# 二、访问元素（查）
# ---------------------------
fruits = ("apple", "banana", "cherry", "date")

# 按索引访问（与列表一致，支持正/负索引）
print("\n访问元素:")
print("索引0:", fruits[0])       # apple（注意:元组不可直接修改此值）
print("倒数第一:", fruits[-1])     # date

# 切片操作（返回新元组，原元组不变）
print("切片1:3:", fruits[1:3])   # ('banana', 'cherry')
print("倒序切片:", fruits[::-1])  # ('date', 'cherry', 'banana', 'apple')


# ---------------------------
# 三、元组的“增删改”（间接操作）
# 注意:元组本身不可变，需转为列表或拼接新元组
# ---------------------------
original = (1, 2, 3)

# ❗️修改元素:转为列表操作
lst = list(original)
lst[1] = 20          # 修改列表元素
modified = tuple(lst)
print("\n修改后元组:", modified)  # 输出: (1, 20, 3)

# ❗️删除元素:转为列表删除后再转回元组
lst.remove(20)
deleted = tuple(lst)
print("删除后元组:", deleted)    # 输出: (1, 3)

# ❗️添加元素:通过元组拼接创建新元组
added = deleted + (5, 6)
print("添加后元组:", added)      # 输出: (1, 3, 5, 6)


# ---------------------------
# 四、嵌套元组操作（可变元素修改）
# 注意:元组中的列表/字典等可变元素可直接修改
# ---------------------------
mixed = (1, [2, 3], (4, 5))

# 修改嵌套的列表元素（列表可变，元组允许此操作）
mixed[1][0] = 20  
print("\n修改嵌套列表:", mixed)  
# 输出: (1, [20, 3], (4, 5))

# 元组中的元组不可修改（会报错）
# mixed[2][0] = 40  ❌ 报错:'tuple' object does not support item assignment


# ---------------------------
# 五、元组拆包（解包）
# ---------------------------
# 常规拆包（变量数需与元素数一致）
a, b, c = (10, 20, 30)
print("\n拆包结果:", a, b, c)  # 10 20 30

# 忽略元素（用下划线占位）
data = (1, 2, 3, 4)
x, _, y, _ = data
print("忽略元素:", x, y)      # 1 3

# 嵌套拆包
nested = (1, (2, 3), [4, 5])
outer, (inner1, inner2), lst = nested
print("嵌套拆包:", outer, inner1, inner2, lst)  # 1 2 3 [4, 5]


# ---------------------------
# 六、常用内置函数
# ---------------------------
nums = (3, 1, 4, 2)

# 长度
print("\n元组长度:", len(nums))  # 4

# 排序（返回新列表，元组本身不变）
sorted_list = sorted(nums)
print("排序结果:", sorted_list)  # [1, 2, 3, 4]

# 反转（返回迭代器，转为元组）
reversed_tuple = tuple(reversed(nums))
print("反转元组:", reversed_tuple)  # (2, 4, 1, 3)


# ---------------------------
# 七、元组推导式（生成器表达式）
# 注意:无直接元组推导式，需用tuple()转换生成器表达式
# ---------------------------
gen = (x**2 for x in range(1, 6))  # 生成器表达式
squares = tuple(gen)
print("\n元组推导式:", squares)  # (1, 4, 9, 16, 25)


# ---------------------------
# 八、元组 vs 列表:核心区别
# ---------------------------
print("\n⚠️ 注意事项:")
print("1. 元组不可变，列表可变:")
print("   - 元组适合存储不变数据（如配置、坐标）")
print("   - 列表适合动态数据（如用户输入、实时更新列表）")

print("\n2. 性能差异:")
print("   - 元组因不可变，创建和访问速度略快于列表")
print("   - 列表因动态扩容，涉及更多内存操作")

print("\n3. 哈希性:")
print("   - 元组若包含不可变元素（如数字、字符串、元组），可作为字典键")
print("   - 列表不可哈希，不能作为字典键")

# 示例:元组作为字典键
dict_key = (1, 2)
my_dict = {dict_key: "value"}
print("\n元组作为字典键:", my_dict)  # {(1, 2): 'value'}